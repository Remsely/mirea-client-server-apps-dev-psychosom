package ru.remsely.psyhosom.telegram.command

import arrow.core.raise.either
import org.springframework.stereotype.Component
import org.telegram.telegrambots.extensions.bots.commandbot.commands.BotCommand
import org.telegram.telegrambots.meta.api.objects.Chat
import org.telegram.telegrambots.meta.api.objects.User
import org.telegram.telegrambots.meta.bots.AbsSender
import ru.remsely.psyhosom.domain.error.getOrThrowUnexpectedBehavior
import ru.remsely.psyhosom.domain.value_object.TelegramBotToken
import ru.remsely.psyhosom.domain.value_object.TelegramChatId
import ru.remsely.psyhosom.monitoring.log.logger
import ru.remsely.psyhosom.telegram.BotMessageSender
import ru.remsely.psyhosom.usecase.auth.ConfirmAccountCommand
import ru.remsely.psyhosom.usecase.auth.WebSocketAccountConfirmationNotifier

@Component
open class StartCommand(
    private val botMessageSender: BotMessageSender,
    private val confirmAccountCommand: ConfirmAccountCommand,
    private val accountConfirmationNotifier: WebSocketAccountConfirmationNotifier
) : BotCommand(
    Command.START.value, "–ù–∞—á–∞—Ç—å"
) {
    private val log = logger()

    override fun execute(absSender: AbsSender, user: User, chat: Chat, args: Array<out String>?) {
        log.info("Command ${Command.START.value} was executed in chat ${chat.id} with args: $args")

        if (args.isNullOrEmpty() || args.size != 1) {
            val errorText = """
                ‚ö†Ô∏è <b>–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /start</b>
                –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –ø–µ—Ä–µ—Ö–æ–¥–∏–ª–∏ –ø–æ —Å—Å—ã–ª–∫–µ, —É–∫–∞–∑–∞–Ω–Ω–æ–π –Ω–∞ —Å–∞–π—Ç–µ.
            """.trimIndent()

            absSender.execute(
                botMessageSender.sendMessage(
                    chatId = TelegramChatId(chat.id).getOrThrowUnexpectedBehavior(),
                    text = errorText
                )
            )
            return
        }

        val token = args[0]

        either {
            confirmAccountCommand.execute(
                token = TelegramBotToken(token).bind(),
                chatId = TelegramChatId(chat.id.toString()).bind()
            ).bind()
        }.fold(
            {
                val errorText = """
                    ‚è∞ <b>–í—Ä–µ–º—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ</b>
                    –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ.
                """.trimIndent()

                absSender.execute(
                    botMessageSender.sendMessage(
                        chatId = TelegramChatId(chat.id).getOrThrowUnexpectedBehavior(),
                        text = errorText
                    )
                )
                log.warn("Error while executing command ${Command.START.value} in chat ${chat.id} with args: $args.")
            },
            {
                log.info("Command ${Command.START.value} successfully executed in chat ${chat.id} with args: $args.")

                accountConfirmationNotifier.sendNotification(
                    token = TelegramBotToken(token).getOrThrowUnexpectedBehavior(),
                    status = WebSocketAccountConfirmationNotifier.Status.CONFIRMED
                )

                val successText = """
                    üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>
                    –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.
                """.trimIndent()

                absSender.execute(
                    botMessageSender.sendMessage(
                        chatId = TelegramChatId(chat.id).getOrThrowUnexpectedBehavior(),
                        text = successText
                    )
                )
            }
        )
    }
}
