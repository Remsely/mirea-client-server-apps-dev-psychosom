package ru.remsely.psyhosom.telegram.impl

import org.springframework.beans.factory.annotation.Value
import org.springframework.stereotype.Component
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton
import org.telegram.telegrambots.meta.bots.AbsSender
import ru.remsely.psyhosom.domain.consultation.Consultation
import ru.remsely.psyhosom.telegram.BotMessageSender
import ru.remsely.psyhosom.telegram.callback.Callback
import ru.remsely.psyhosom.usecase.telegram.NotificationEvent
import ru.remsely.psyhosom.usecase.telegram.TelegramBotNotifier
import java.time.format.DateTimeFormatter

private val timeFormatter = DateTimeFormatter.ofPattern("HH:mm")
private val dateFormatter = DateTimeFormatter.ofPattern("dd.MM.yyyy")

@Component
class TelegramBotNotifierImpl(
    @Value("\${frontend.review-url}")
    private val reviewUrl: String,

    private val absSender: AbsSender,

    private val botMessageSender: BotMessageSender,
) : TelegramBotNotifier {
    override fun notify(event: NotificationEvent) = when (event) {
        is NotificationEvent.ConsultationCreated -> sendCreation(event.consultation)
        is NotificationEvent.ConsultationCancelled -> sendCancel(event.consultation)
        is NotificationEvent.ConsultationRejected -> sendReject(event.consultation)
        is NotificationEvent.ConsultationConfirmed -> sendConfirmation(event.consultation)
        is NotificationEvent.ConsultationNotified -> sendComingNotification(event.consultation)
        is NotificationEvent.ConsultationFinished -> sendFinishedNotification(event.consultation)
    }

    private fun sendCreation(c: Consultation) {
        val patientText = """
            üéâ <b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∞!</b>
            –ú—ã —Å–æ–æ–±—â–∏–º –≤–∞–º, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –ø—Å–∏—Ö–æ–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –∑–∞–ø–∏—Å—å.
        """.trimIndent()

        val patientKeyboard = InlineKeyboardMarkup().apply {
            keyboard = listOf(
                listOf(
                    InlineKeyboardButton().apply {
                        text = "üö´ –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å"
                        callbackData = "/${Callback.CANCEL_CONSULTATION.value} ${c.id}"
                    }
                )
            )
        }

        val psychologistText = """
            üÜï <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é.</b>

            üë§ –ü–∞—Ü–∏–µ–Ω—Ç: <i>${c.patient.firstName}</i>
            üìÖ –î–∞—Ç–∞: <code>${c.period.readableStartDate}</code>
            ‚è∞ –í—Ä–µ–º—è: <code>${c.period.readableTimePeriod}</code>
        """.trimIndent() + if (c.problemDescription != null) {
            "\n\uD83D\uDCDD –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã: <i>${c.problemDescription}</i>"
        } else {
            ""
        }

        val psychologistKeyboard = InlineKeyboardMarkup().apply {
            keyboard = listOf(
                listOf(
                    InlineKeyboardButton().apply {
                        text = "‚úÖ –ü—Ä–∏–Ω—è—Ç—å"
                        callbackData = "/${Callback.CONFIRM_CONSULTATION.value} ${c.id}"
                    }
                ),
                listOf(
                    InlineKeyboardButton().apply {
                        text = "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å"
                        callbackData = "/${Callback.REJECT_CONSULTATION.value} ${c.id}"
                    }
                )
            )
        }

        absSender.execute(
            botMessageSender.sendMessageWithInlineButtons(
                chatId = c.patient.account.tgChatId,
                text = patientText,
                keyboard = patientKeyboard,
            )
        )

        absSender.execute(
            botMessageSender.sendMessageWithInlineButtons(
                chatId = c.psychologist.account.tgChatId,
                text = psychologistText,
                keyboard = psychologistKeyboard,
            )
        )
    }

    private fun sendCancel(c: Consultation) {
        val patientText = """
            ‚ùå <b>–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.</b>
            –î–æ –Ω–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á!
        """.trimIndent()

        val psychologistText = """
            ‚ö†Ô∏è <b>${c.patient.firstName} –æ—Ç–º–µ–Ω–∏–ª(-–∞) –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é.</b>

            üìÖ ${c.period.readableStartDate}, ‚è∞ ${c.period.readableTimePeriod} ‚Äî —ç—Ç–∞ –≤—Å—Ç—Ä–µ—á–∞ –±–æ–ª—å—à–µ –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç—Å—è.
        """.trimIndent()

        absSender.execute(
            botMessageSender.sendMessage(
                chatId = c.patient.account.tgChatId,
                text = patientText,
            )
        )

        absSender.execute(
            botMessageSender.sendMessage(
                chatId = c.psychologist.account.tgChatId,
                text = psychologistText,
            )
        )
    }

    private fun sendReject(c: Consultation) {
        val patientText = """
            üòî <b>${c.psychologist.firstName} –æ—Ç–∫–ª–æ–Ω–∏–ª(-–∞) –≤–∞—à—É –∑–∞—è–≤–∫—É</b>
    
            –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è –∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞.
        """.trimIndent()

        val psychologistText = """
            ‚ùå <b>–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.</b>
        """.trimIndent()

        absSender.execute(
            botMessageSender.sendMessage(
                chatId = c.patient.account.tgChatId,
                text = patientText,
            )
        )

        absSender.execute(
            botMessageSender.sendMessage(
                chatId = c.psychologist.account.tgChatId,
                text = psychologistText,
            )
        )
    }

    private fun sendConfirmation(c: Consultation) {
        val patientText = """
            üéâ <b>${c.psychologist.firstName} –ø—Ä–∏–Ω—è–ª(-–∞) –≤–∞—à—É –∑–∞—è–≤–∫—É.</b>

            üìÖ ${c.period.readableStartDate} ‚è∞ ${c.period.readableTimePeriod}
            –ú—ã –æ—Ç–ø—Ä–∞–≤–∏–º –≤–∞–º —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∑–≤–æ–Ω–∫—É –ø–µ—Ä–µ–¥ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–µ–π.
        """.trimIndent()

        val psychologistText = """
            ‚úÖ <b>–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.</b>
            –ú—ã –æ—Ç–ø—Ä–∞–≤–∏–º –≤–∞–º —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∑–≤–æ–Ω–∫—É –ø–µ—Ä–µ–¥ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–µ–π.
        """.trimIndent()

        absSender.execute(
            botMessageSender.sendMessage(
                chatId = c.patient.account.tgChatId,
                text = patientText,
            )
        )

        absSender.execute(
            botMessageSender.sendMessage(
                chatId = c.psychologist.account.tgChatId,
                text = psychologistText,
            )
        )
    }

    private fun sendComingNotification(c: Consultation) {
        val meetingLink = c.meetingLink?.value ?: absSender.execute(
            botMessageSender.sendMessage(
                chatId = c.psychologist.account.tgChatId,
                text = "‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤—Å—Ç—Ä–µ—á–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏!</b>",
            )
        )

        val patientText = """
            üì£ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.</b>
            
            üóì –î–∞—Ç–∞: ${c.period.readableStartDate}
            ‚è∞ –í—Ä–µ–º—è: ${c.period.readableTimePeriod}
            
            üë§ –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç: ${c.psychologist.firstName} ${c.psychologist.lastName}
            
            üíª –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∑–≤–æ–Ω–∫—É: $meetingLink
        """.trimIndent()

        val psychologistText = """
            ‚è∞ <b>–°–∫–æ—Ä–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è.</b>
            
            üóì –î–∞—Ç–∞: ${c.period.readableStartDate}
            ‚è∞ –í—Ä–µ–º—è: ${c.period.readableTimePeriod}
            
            üë§ –ü–∞—Ü–∏–µ–Ω—Ç: ${c.patient.firstName} ${c.patient.lastName}
            
            üíª –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∑–≤–æ–Ω–∫—É: $meetingLink
        """.trimIndent()

        absSender.execute(
            botMessageSender.sendMessage(
                chatId = c.patient.account.tgChatId,
                text = patientText,
            )
        )

        absSender.execute(
            botMessageSender.sendMessage(
                chatId = c.psychologist.account.tgChatId,
                text = psychologistText,
            )
        )
    }

    fun sendFinishedNotification(c: Consultation) {
        val patientText = """
            ‚úÖ <b>–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>

            –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å. –ú—ã –±—É–¥–µ–º —Ä–∞–¥—ã –ø–æ–ª—É—á–∏—Ç—å –æ—Ç –≤–∞—Å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å.
            –û—Ç–∑—ã–≤ –æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–µ –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ: $reviewUrl.
        """.trimIndent()


        absSender.execute(
            botMessageSender.sendMessage(
                chatId = c.patient.account.tgChatId,
                text = patientText,
            )
        )
    }
}

private val Consultation.Period.readableStartDate: String
    get() = this.start.format(dateFormatter)

private val Consultation.Period.readableTimePeriod: String
    get() = "${this.start.format(timeFormatter)}-${this.end.format(timeFormatter)}"
